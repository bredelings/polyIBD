m1 <- 5
m2 <- 5
m_true <- c(m1,m2)
pos <- sort(sample(1.4e6, n))
k_true <- 5
sim <- simData(pos=list(contig1=sort(sample(1.4e6, n))),
m1=m_true[1], m2=m_true[2],
f=f_true, rho=rho, k=k_true, p=NULL, p_shape1=0.1, p_shape2=0.1)
f_ind_true <- mean(unlist(sim$IBD[,3:ncol(sim$IBD)]))
trueIBD <- data.frame(CHROM = sim$IBD$CHROM, POS=sim$IBD$POS,
z_true =rowSums(sim$IBD[,3:ncol(sim$IBD),drop=FALSE]))
# run MCMC
ret <- polyIBD::runMCMC(input = sim, rho=rho, k_max=25,
burnin=5e3, samples=1e4, reportIteration=1e2, e1 = 0.05, e2 = 0.05)
#jpeg(filename = paste0("~/Desktop/scratch/polyIBD_MOI55_", format(Sys.time(),  "%a %b %d %X %Y"), ".jpg"),
#                       height = 12, width = 12, res=500, units = "in")
polyIBD::ggplot_IBDraster(ret, trueIBD = trueIBD,
truem1 = m_true[1], truem2 = m_true[2],
truef = f_ind_true)
#jpeg(filename = paste0("~/Desktop/scratch/polyIBD_MOI55_", format(Sys.time(),  "%a %b %d %X %Y"), ".jpg"),
#                       height = 12, width = 12, res=500, units = "in")
polyIBD::ggplot_IBDraster(ret, trueIBD = trueIBD,
truem1 = m_true[1], truem2 = m_true[2],
truef = f_ind_true)
# ------------------------------------------------------------------
# simulate data
n <- 1e3
rho <- 7.4e-7
f_true <- sample(seq(0,1,0.1))
m1 <- 5
m2 <- 5
m_true <- c(m1,m2)
pos <- sort(sample(1.4e6, n))
k_true <- 5
sim <- simData(pos=list(contig1=sort(sample(1.4e6, n))),
m1=m_true[1], m2=m_true[2],
f=f_true, rho=rho, k=k_true, p=NULL, p_shape1=0.1, p_shape2=0.1)
f_ind_true <- mean(unlist(sim$IBD[,3:ncol(sim$IBD)]))
trueIBD <- data.frame(CHROM = sim$IBD$CHROM, POS=sim$IBD$POS,
z_true =rowSums(sim$IBD[,3:ncol(sim$IBD),drop=FALSE]))
# run MCMC
ret <- polyIBD::runMCMC(input = sim, rho=rho, k_max=25,
burnin=5e3, samples=1e4, reportIteration=1e2, e1 = 0.05, e2 = 0.05)
#jpeg(filename = paste0("~/Desktop/scratch/polyIBD_MOI55_", format(Sys.time(),  "%a %b %d %X %Y"), ".jpg"),
#                       height = 12, width = 12, res=500, units = "in")
polyIBD::ggplot_IBDraster(ret, trueIBD = trueIBD,
truem1 = m_true[1], truem2 = m_true[2],
truef = f_ind_true)
# ------------------------------------------------------------------
# simulate data
n <- 1e3
rho <- 7.4e-7
f_true <- sample(seq(0,1,0.1))
m1 <- 5
m2 <- 5
m_true <- c(m1,m2)
pos <- sort(sample(1.4e6, n))
k_true <- 5
sim <- simData(pos=list(contig1=sort(sample(1.4e6, n))),
m1=m_true[1], m2=m_true[2],
f=f_true, rho=rho, k=k_true, p=NULL, p_shape1=0.1, p_shape2=0.1)
f_ind_true <- mean(unlist(sim$IBD[,3:ncol(sim$IBD)]))
trueIBD <- data.frame(CHROM = sim$IBD$CHROM, POS=sim$IBD$POS,
z_true =rowSums(sim$IBD[,3:ncol(sim$IBD),drop=FALSE]))
# run MCMC
ret <- polyIBD::runMCMC(input = sim, rho=rho, k_max=25,
burnin=5e3, samples=1e4, reportIteration=1e2, e1 = 0.05, e2 = 0.05)
#jpeg(filename = paste0("~/Desktop/scratch/polyIBD_MOI55_", format(Sys.time(),  "%a %b %d %X %Y"), ".jpg"),
#                       height = 12, width = 12, res=500, units = "in")
polyIBD::ggplot_IBDraster(ret, trueIBD = trueIBD,
truem1 = m_true[1], truem2 = m_true[2],
truef = f_ind_true)
# ------------------------------------------------------------------
# simulate data
n <- 1e3
rho <- 7.4e-7
f_true <- sample(seq(0,1,0.1))
m1 <- 5
m2 <- 5
m_true <- c(m1,m2)
pos <- sort(sample(1.4e6, n))
k_true <- 5
sim <- simData(pos=list(contig1=sort(sample(1.4e6, n))),
m1=m_true[1], m2=m_true[2],
f=f_true, rho=rho, k=k_true, p=NULL, p_shape1=0.1, p_shape2=0.1)
f_ind_true <- mean(unlist(sim$IBD[,3:ncol(sim$IBD)]))
trueIBD <- data.frame(CHROM = sim$IBD$CHROM, POS=sim$IBD$POS,
z_true =rowSums(sim$IBD[,3:ncol(sim$IBD),drop=FALSE]))
# run MCMC
ret <- polyIBD::runMCMC(input = sim, rho=rho, k_max=25,
burnin=5e3, samples=1e4, reportIteration=1e2, e1 = 0.05, e2 = 0.05)
#jpeg(filename = paste0("~/Desktop/scratch/polyIBD_MOI55_", format(Sys.time(),  "%a %b %d %X %Y"), ".jpg"),
#                       height = 12, width = 12, res=500, units = "in")
polyIBD::ggplot_IBDraster(ret, trueIBD = trueIBD,
truem1 = m_true[1], truem2 = m_true[2],
truef = f_ind_true)
#jpeg(filename = paste0("~/Desktop/scratch/polyIBD_MOI55_", format(Sys.time(),  "%a %b %d %X %Y"), ".jpg"),
#                       height = 12, width = 12, res=500, units = "in")
polyIBD::ggplot_IBDraster(ret, trueIBD = trueIBD,
truem1 = m_true[1], truem2 = m_true[2],
truef = f_ind_true)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcrossLD
#polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
polyIBDtest<- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDtestreal, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
polyIBDtest<- polyIBD::vcf2polyIBDinput(vcffile = "~/Desktop/scratch/test_gatk.vcf")
#polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
set.seed(44)
#polyIBDtest<- polyIBD::vcf2polyIBDinput(vcffile = "~/Desktop/scratch/test_gatk.vcf")
retlistest <- lapply(polyIBDtest, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
#polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
#polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
#polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
## 11 seems to be problem
polyIBD::runMCMC(polyIBDcross[11], rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
## 11 seems to be problem
polyIBD::runMCMC(polyIBDcross[[11]], rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
## 11 seems to be problem
polyIBD::runMCMC(polyIBDcross[[11]], rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
library(polyIBD)
## 11 seems to be problem
prob <- polyIBD::runMCMC(polyIBDcross[[11]], rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
prob$raw$logLike_burnin
prob$raw$f_ind
prob$raw$logLike
prob$raw$m1
prob$raw$m2
prob$raw$k
prob$raw$f
set.seed(44)
library(polyIBD)
## 11 seems to be problem
prob <- polyIBD::runMCMC(polyIBDcross[[11]], rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
#polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
#polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
#polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
## 11 seems to be problem
prob <- polyIBD::runMCMC(polyIBDcross[[11]], rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
#polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
#polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
#polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
#polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
#polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
#polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
## 11 seems to be problem
prob <- polyIBD::runMCMC(polyIBDcross[[3]], rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
#polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
#polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
#polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
## 11 seems to be problem
prob <- polyIBD::runMCMC(polyIBDcross[[4]], rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
#polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
#polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
#polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
set.seed(44)
#polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
#polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
#polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
set.seed(44)
## 11 seems to be problem
prob <- polyIBD::runMCMC(polyIBDcross[[1]], rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
x = data.frame(m1=rep(1,100), m2=rep(1,100), f=sample(seq(0,1,0.1),100), f_ind=sample(seq(0,1,0.1),100), k=sample(seq(1,10,1),100))
x = data.frame(m1=rep(1,100), m2=rep(1,100), f=sample(seq(0,1,0.1),100), f_ind=sample(seq(0,1,0.1),100), k=sample(seq(1,10,1),100, replace = T))
x = data.frame(m1=rep(1,100), m2=rep(1,100), f=sample(seq(0,1,0.01),100), f_ind=sample(seq(0,1,0.01),100), k=sample(seq(1,10,1),100, replace = T))
x
raw_output = x
# calculate quantiles over parameters
quants <- t(mapply(function(x){quantile(x, probs=c(0.05, 0.5, 0.95))}, raw_output))
library(polyIBD)
#polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
paste0("~/Desktop/scratch_raw_output/", format(Sys.time(), "%d-%b-%Y_%H.%M.%OS3"), ".csv")
library(polyIBD)
polyIBD::main
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
quant <- readRDS(file="~/Desktop/scratch_raw_output/08-Jun-2018_12.07.25.309.RDS")
View(quants)
quant <- readRDS(file="~/Desktop/scratch_raw_output/08-Jun-2018_12.07.25.309.RDS")
View(quant)
library(polyIBD)
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
View(quant)
new <- readRDS(file="~/Desktop/scratch_raw_output/08-Jun-2018_12.14.21.096.RDS")
View(new)
library(polyIBD)
set.seed(44)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
library(polyIBD)
polyIBDtestreal <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_polyIBDinput.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
library(polyIBD)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
library(polyIBD)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
t <- readRDS(file="~/Desktop/scratch_raw_output/08-Jun-2018_13.54.02.356.RDS")
View(t)
library(polyIBD)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
library(polyIBD)
library(polyIBD)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
set.seed(44)
library(polyIBD)
set.seed(44)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
library(polyIBD)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
library(polyIBD)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
library(polyIBD)
library(polyIBD)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
library(polyIBD)
polyIBDcrossLD  <- readRDS("~/Documents/MountPoints/mountedScratchLL/PfCross_VCFs/variantfiltration/data/pfcross_ld.RDS")
polyIBDcross <- polyIBD::vcf2polyIBDinput(vcfR = polyIBDcrossLD)
retlistreal <- lapply(polyIBDcross, polyIBD::runMCMC, rho=7.4e-7, k_max=50,
burnin=5e1, samples=1e2, reportIteration=NA,
e1=0.05, e2=0.05)
length(polyIBDcross)
t <- data.frame(
input=polyIBDcross,
rho=rep(7.4e-7, length(polyIBDcross)),
k_max=rep(50, length(polyIBDcross)),
burnin=rep(5e3, length(polyIBDcross)),
samples=rep(1e4, length(polyIBDcross)),
reportIteration=rep(NA, length(polyIBDcross))
)
slurm_apply(function(i) func(polyIBDcross[[i]]),
data.frame(input = seq_along(polyIBDcross)),
add_objects = c("polyIBD::runMCMC", "polyIBDcross"),
nodes = 2, cpus_per_node = 2)
polyIBD::runMCMC()
library(polyIBD)
library(rslurm)
slurm_apply(function(i) func(polyIBDcross[[i]]),
data.frame(input = seq_along(polyIBDcross)),
add_objects = c("polyIBD::runMCMC", "polyIBDcross"),
nodes = 2, cpus_per_node = 2)
slurm_apply(function(i) func(polyIBDcross[[i]]),
data.frame(i = seq_along(polyIBDcross)))
seq_along(polyIBDcross)
?slurm_apply
sjob <- slurm_apply(function(i) polyIBD::runMCMC(polyIBDcross[[i]]),
data.frame(i = seq_along(polyIBDcross),
rho=rep(7.4e-7, length(polyIBDcross)),
k_max=rep(50, length(polyIBDcross)),
burnin=rep(5e3, length(polyIBDcross)),
samples=rep(1e4, length(polyIBDcross)),
reportIteration=rep(NA, length(polyIBDcross))),
add_objects = c("polyIBDcross"),
submit = F
)
sjob
f=readRDS(file="~/Desktop/polyIBD_Temp/_rslurm_88f72971369d/f.RDS")
f
f=readRDS(file="~/Desktop/polyIBD_Temp/_rslurm_88f72971369d/params.RDS")
load("/Users/nickbrazeau/Desktop/polyIBD_Temp/_rslurm_88f72971369d/add_objects.RData")
add_objects
f
runMCMC
ret = retlist[[1]]
ret = retlistreal[[1]]
ret$samples
ret$summary$quantiles
setwd("~/Documents/GitHub/polyIBD/")
vcffile = "~/Desktop/polyIBD_Temp/play3.vcf"
vcf <- vcfR::read.vcfR(file=vcffile, verbose=T) # read vcf
vcf <-vcfR::extract.indels(vcf, return.indels = F) # subset to SNPs
vcf <- vcf[vcfR::is.biallelic(vcf)] # subset to biallelic
tol <- 1e-9 # tolerance for denominator if AF become the same
# extract the within sample allele frequencies
vcfAD <- vcfR::extract.gt(vcf, element = "AD")
vcfAD <- vcfR::AD_frequency(vcfAD)
vcfAD <- apply(vcfAD, 2, function(x){as.numeric(x)})
# extract distances via positions from vcfR object
vcfpos <- vcfR::getFIX(vcf)
vcfpos <- vcfpos[,colnames(vcfpos) %in% c("CHROM", "POS")]
vcfpos[,2] <- as.numeric(vcfpos[,2])
vcfdf <- cbind.data.frame(vcfpos, vcfAD)
vcflist <- split(vcfdf, vcfdf$CHROM)
vcfdf_fromlist = vcflist[[1]]
# get correlation matrix. NA values are imputed as the mean
df1 <- vcfdf_fromlist[, !colnames(vcfdf_fromlist) %in% c("CHROM", "POS")]
m = df1
tol <- 1e-9 # tolerance for denominator if AF become the same
n <- nrow(m)
c <- matrix(NA,n,n)
c
View(df1)
i=1
x1 <- unlist(m[i,])
x1
mu1 <- mean(x1,na.rm=TRUE)
j=1
x2 <- unlist(m[j,])
x2
mu2 <- mean(x2,na.rm=TRUE)
mu2
mu1
c[i,j] <- c[j,i] <- sum((x1-mu1)*(x2-mu2),na.rm=TRUE)/sqrt( sum((x1-mu1)^2,na.rm=TRUE)*sum((x2-mu2)^2,na.rm=TRUE) + tol)
View(c)
j=2
x2 <- unlist(m[j,])
mu2 <- mean(x2,na.rm=TRUE)
c[i,j] <- c[j,i] <- sum((x1-mu1)*(x2-mu2),na.rm=TRUE)/sqrt( sum((x1-mu1)^2,na.rm=TRUE)*sum((x2-mu2)^2,na.rm=TRUE) + tol)
View(c)
x2
View(df1)
x1
t <- vcfR::read.vcfR(file="~/Documents/MountPoints/mountedScratchLL/Pf3K_VCFs/variantfiltration/Pf3K_HC_Pf3KData.pass.vcf")
vcf = readRDS("~/Desktop/pfcross_ld.RDS")
setwd("~/Documents/GitHub/polyIBD/")
vcf = readRDS("~/Desktop/pfcross_ld.RDS")
# this is simply to protect polyIBD -- users should have already subsetted to biallelic SNPs
vcf <-vcfR::extract.indels(vcf, return.indels = F) # subset to SNPs
vcf <- vcf[vcfR::is.biallelic(vcf)] # subset to biallelic
print(vcf)
# -----------------------------------------------------
# determine ploidy to determine genotype numeric placeholder
#------------------------------------------------------
ploidy <- stringr::str_extract(vcf@meta[grepl("ploidy", vcf@meta)], "ploidy=[0-9]")
ploidy <- stringr::str_split(t(ploidy), "=", simplify = T)
ploidy <- as.numeric(ploidy[1,2])
if(ploidy == 2){
snpmatrix <- vcfR::extract.gt(vcf, element='GT', as.numeric=F) # numeric as T doesn't parse 0/1 correctly
snpmatrix[snpmatrix == "0/0"] <- 0
snpmatrix[snpmatrix == "0/1"] <- 1
snpmatrix[snpmatrix == "1/1"] <- 2
snpmatrix <- apply(snpmatrix, 2, function(x){as.numeric(x)}) # need to convert from char (--dependent on case of "/") to numeric
} else if(ploidy == 1){
snpmatrix <- vcfR::extract.gt(vcf, element='GT', as.numeric=T)
snpmatrix[snpmatrix == 0] <- 0
snpmatrix[snpmatrix == 1] <- 2
} else {
stop("You have a ploidy that is less than 1 or greater than 3, which cannot be accomodated by polyIBD")
}
# -----------------------------------------------------
# Determine the number of samples and thier combinations
#------------------------------------------------------
smpls <- factor(colnames(vcfR::extract.gt(vcf)))
smpls <- t(combn(smpls, 2))
CHROM <- vcfR::getCHROM(vcf)
POS <- vcfR::getPOS(vcf)
# -----------------------------------------------------
# Calculate pop AF, p
#------------------------------------------------------
L <- length(POS)
p <- rep(NA, length(POS))
p <- apply(snpmatrix, 1,
function(x){(2*(length(which(x==0))) + length(which(x==1)))/(2*length(x))}) # since we know homozygous ref is 0, so this counts as 2 As, and then we count hets and then divide by 2*possible alleles. Doing this roundabout way because we aren't in HWE
# -----------------------------------------------------
# Attach Positions to the VCF GT Informative Loci
#------------------------------------------------------
snpmatrixsave <- cbind.data.frame(CHROM, POS, snpmatrix)
# -----------------------------------------------------
# return
#-----------------------------------------------------
retlist <- list(samples = smpls,
snpmatrix = snpmatrixsave,
p=p)
class(retlist) <- "polyIBDinput"
##############################################################################
# Purpose: Wrap polyIBD::runMCMC for slurm submission on LL
# Author:   Nick Brazeau
# Input:
# Output: setup for use in rslurm
# Remarks:
###############################################################################
#devtools::install_github("nickbrazeau/polyIBD")
library(polyIBD)
library(rslurm)
head(retlist)
str(retlist)
retlist$samples[1,]
# iterate over a list of samples
retlistsamples == retlist$samples[1,]
# iterate over a list of samples
retlistsamples = retlist$samples[1,]
p = retlist$p
unlist(retlistsamples)
retlist$snpmatrix[, colnames(retlist$snpmatrix) %in% unlist(retlistsamples)]
retlist$snpmatrix[, colnames(retlist$snpmatrix) %in% c("CHROM", "POS", retlistsamples)]
c("CHROM", "POS", unlist(retlistsamples))
retlistsamples
as.character(retlistsamples)
# iterate over a list of samples
gtmat <- retlist$snpmatrix[, colnames(retlist$snpmatrix) %in% c("CHROM", "POS", as.character(retlistsamples))]
gtmat
p = snpmatrix$p
p=retlist$p
# run MCMC
ret <- polyIBD::runMCMC(gtmat = gtmat,
p=p,
rho=7.4e-7,
k_max=50,
burnin=5e3,
samples=1e4, reportIteration=NA,
e1 = 0.05, e2 = 0.05)
polyIBDpf3kLD = readRDS("~/Desktop/pf_ld.RDS")
